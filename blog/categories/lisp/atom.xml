<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lisp | Stack Unwinding]]></title>
  <link href="http://chrislambda.github.io/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://chrislambda.github.io/"/>
  <updated>2014-02-01T23:28:28-05:00</updated>
  <id>http://chrislambda.github.io/</id>
  <author>
    <name><![CDATA[Chris Jones]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From Coding to Calculating]]></title>
    <link href="http://chrislambda.github.io/blog/2014/01/20/from-coding-to-calculating/"/>
    <updated>2014-01-20T17:18:10-05:00</updated>
    <id>http://chrislambda.github.io/blog/2014/01/20/from-coding-to-calculating</id>
    <content type="html"><![CDATA[<p>Like many aspiring software developers and computer scientists, I wanted to improve my art by going through <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html" title="SICP">Structure and Interpretation of Computer Programs</a>.  I fully expected to emerge from it all with Sherlock Holmes-esque abilities in programming.  Yeah, that was about 7 years ago.  Still, every so often, I’ll do some of the exercises and search online to see how my answers compared to others’.</p>

<!--more-->

<p>Because I didn’t spend a ton of time on these problems, I usually only implemented a naive solution and could only marvel at others’ much cooler, more clever, more efficient solutions.  But I could never be sure if they were equivalent.  <strong>Or could I?</strong> </p>

<p>Here’s the example that inspired me to write this post, from SICP:</p>

<blockquote>
  <p><strong>Exercise 2.28.</strong>  Write a procedure <code>fringe</code> that takes as argument a tree (represented as a list) and returns a list whose elements are all the leaves of the tree arranged in left-to-right order. For example,</p>
</blockquote>

<pre><code>(define x (list (list 1 2) (list 3 4)))

(fringe x)
;; equals (1 2 3 4)

(fringe (list x x))
;; equals (1 2 3 4 1 2 3 4)
</code></pre>

<p>If you’re not a Scheme user, this function takes something that looks like <code>((1 2) (3 4))</code> and gives something that looks like <code>(1 2 3 4)</code>.  It “gets the numbers out of the parentheses”.  The nifty thing about this function is that it will do this for arbitrarily-nested trees, not just one level deep.</p>

<p>This function also shows up in Paul Graham’s <a href="http://www.paulgraham.com/onlisp.html" title="On Lisp">On Lisp</a>, where it’s called <code>flatten</code>.  In <a href="http://letoverlambda.com/index.cl/guest/chap1.html#sec_3" title="Let Over Lambda">Let Over Lambda</a>, Doug Hoyte points out that since Lisp code is represented by Lisp trees, <code>flatten</code> performs code-walking.</p>

<p>How do you solve a problem like this?  One way is to reason about the kinds of values your tree/list can be, and what your function should do with the tree/list when it assumes those values.  In Scheme, a list can represent a binary tree.  If <code>tr</code> is a tree, then <code>(car tr)</code> gives you the left branch and <code>(cdr tr)</code> gives you the right branch.  So thinking recursively, let’s say someone’s already <code>flatten</code>ed the left and right branch.  What now?  Well, just append the flattened-left branch to the flattened-right branch and you’re done.</p>

<p>I regard trees as being empty, being a leaf, or being a branch with two leaves.  We covered the latter case just above, so let’s handle the other two:</p>

<ul>
  <li>
    <p>Empty, represented by the empty list <code>()</code>.  What does a flattened empty list look like?  That’s right: just the empty list, so return that.</p>
  </li>
  <li>
    <p>A leaf. We want the function to return a list though, so return a list containing this value (i.e., wrap it in parentheses).</p>
  </li>
</ul>

<p>That’s all three cases!  Here’s a naive solution in Common Lisp:</p>

<pre><code>(defun flatten (tree)
	(cond ((null tree) nil)
	      ((atom tree) (cons tree nil))
	      (t (append (flatten (car tree))
		         (flatten (cdr tree))))))
</code></pre>

<p><a href="http://izquotes.com/quote/276282" title="Lisp has all the visual appeal of oatmeal with fingernail clippings mixed in. -Larry Wall">Lisp code, so beautiful!</a> Here, <code>null</code> tests for the empty list and <code>atom</code> tests to see if the tree is a leaf.</p>

<p>This is all well and good, and it satisfies the test cases from SICP. But if you search for other answers to this question, or even look at the definition in <a href="http://www.paulgraham.com/onlisp.html" title="On Lisp">On Lisp</a>, there’s one that looks a bit different:</p>

<pre><code>(defun flatten (tree)
   (labels ((rec (x acc)
      (cond ((null x) acc)
                ((atom x) (cons x acc))
                (t (rec (car x) (rec (cdr x) acc))))))
    (rec tree nil)))
</code></pre>

<p>Here, <code>labels</code> introduces a local helper function in Common Lisp called <code>rec</code> that takes an accumulator.  Except for this, it appears to be of the same “form” as the naive solution.  It’s not immediately obvious to me how this second solution is equivalent to the first one.  Even though I understood the logic of the second solution, I don’t think I would have come up with it on my own, even though I’m familiar with the accumulator technique.  </p>

<p>I wanted to not have to be clever.  Even more, I wanted to be able to prove the equivalence of <em>any</em> other version of this function.  What I wanted was to <em>derive</em> these equivalences in the same way I proved theorems in geometry or performed manipulations in algebra.  </p>

<p>Enter Haskell.</p>

<p>I had been reading about Haskell here and there, and I appreciated that you could reason about programs, even <em>calculate</em> them.  This is the method described in the book <a href="http://www.amazon.com/Algebra-Programming-Prentice-Hall-International-Computer/dp/013507245X" title="Algebra of Programming">Algebra of Programming</a>, which uses the Gofer language, an ancestor of Haskell.  So I’ll recast this in Haskell because its syntax is ultra-clean.  First, let’s roll out our own tree data type:</p>

<pre><code>data Tree a = Empty | Leaf a | Branch (Tree a) (Tree a)
</code></pre>

<p>A tree can be either empty, a leaf holding a value of type <code>a</code>, or a branch of two trees, just like we said above.  The <code>flatten</code> function translates into Haskell easily:</p>

<pre><code>flatten :: Tree a -&gt; [a]
flatten Empty = []
flatten (Leaf a) = [a]
flatten (Branch l r) = flatten l ++ flatten r
</code></pre>

<p>Here, <code>[a]</code> means a list with one value in it, and <code>++</code> means “append”.  The declaration at the top tells us this function takes a <code>Tree</code> holding values of type <code>a</code> and returns a list.  Here’s an example of the function in action:</p>

<pre><code>flatten (Branch (Branch (Leaf 2) (Branch (Branch (Leaf 11) (Empty)) (Leaf 7))) (Leaf 4))
[2,11,7,4]
</code></pre>

<p>To make this look more like the second solution, let’s use the accumulator technique, the benefits of which I’ll go over in another post.  So we define a helper function, <code>flat_helper</code>, that takes an accumulator as its second value:</p>

<pre><code>flat_helper :: Tree a -&gt; [a] -&gt; [a]
flat_helper tree list = flatten tree ++ list
</code></pre>

<p>We flatten <code>tree</code>, and then push the result onto <code>list</code>. I chose this form to “accumulate” the result into <code>list</code>.  We can achieve our final result as follows:</p>

<pre><code>flat_helper tree [] = flatten tree ++ [] = flatten tree
</code></pre>

<p>What does <code>flat_helper</code> do to the tree?  The great thing about this is that we can just <em>mechanically derive</em> what <code>flat_helper</code> does from its definition:</p>

<pre><code>flat_helper Empty lst =
  { definition of flat_helper }
flatten Empty ++ lst =
  { definition of flatten }
[] ++ lst =
lst

flat_helper (Leaf a) lst =
  { definition of flat_helper }
flatten (Leaf a) ++ lst =
  { definition of flatten }
[a] ++ lst

flat_helper (Branch l r) lst = 
  { definition of flat_helper }
flatten (Branch l r) ++ lst =
  { definition of flatten }
(flatten l ++ flatten r) ++ lst =
  { associativity of append }
flatten l ++ (flatten r ++ lst) =
  { definition of flat_helper }
flatten l ++ flat_helper r lst = 
  { definition of flat_helper }
flat_helper l (flat_helper r lst)
</code></pre>

<p>Et voila!  This is the same code from the second solution written in Haskell.  I derived one solution from the other in a way that’s almost mathematical.  It turns out that it’s more efficient than the naive solution, and we don’t even need to use <code>++</code>.  I wish I could learn from programs like this all the time.  </p>

<p>I based the above derivation from a chapter in <a href="http://www.amazon.com/Introduction-Functional-Programming-Haskell-Edition/dp/0134843460/" title="Introduction to Functional Programming in Haskell">Introduction to Functional Programming in Haskell</a>, which has several more derivations like the above (I used their bracket comment notation). They called it <em>synthesizing</em> the program, which is a good way to think about it.</p>

<p>I started out using computers to do work I would find tedious or unfeasible to do on my own–iterating over millions of variables, or printing a report every hour.  Now I can use them to help me think about computers.  A lot of fun for one problem in SICP, I’d say!</p>

]]></content>
  </entry>
  
</feed>
